package com.marketplace.rest.webservices.restfulwebservices.jwt.resource;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.marketplace.rest.webservices.restfulwebservices.BcryptEncoderService;
import com.marketplace.rest.webservices.restfulwebservices.jwt.JwtTokenUtil;
import com.marketplace.rest.webservices.restfulwebservices.jwt.JwtUserDetails;
import com.marketplace.rest.webservices.restfulwebservices.jwt.JwtUserDetailsRepository;
import com.marketplace.rest.webservices.restfulwebservices.marketplace.Product;
import com.marketplace.rest.webservices.restfulwebservices.marketplace.UserDetail;
import com.marketplace.rest.webservices.restfulwebservices.marketplace.UserDetailsRepository;

import java.util.*;

@RestController
@CrossOrigin(origins="http://localhost:4200")
public class JwtAuthenticationRestController {

  @Value("${jwt.http.request.header}")
  private String tokenHeader;

  @Autowired
  private AuthenticationManager authenticationManager;

  @Autowired
  private JwtTokenUtil jwtTokenUtil;

  @Autowired
  private UserDetailsService jwtInMemoryUserDetailsService;
  
  @Autowired
  private JwtUserDetailsRepository jwtUserDetailsRepository;
  
  @Autowired
  private UserDetailsRepository userDetailsRepository;
  
  @Autowired
  private BcryptEncoderService bcryptEncoderService;

  @RequestMapping(value = "${jwt.get.token.uri}", method = RequestMethod.POST)
  public ResponseEntity<?> createAuthenticationToken(@RequestBody JwtTokenRequest authenticationRequest)
      throws AuthenticationException {
	  System.out.println("inside auth controiller");
    authenticate(authenticationRequest.getUsername(), authenticationRequest.getPassword());

    final UserDetails userDetails = jwtInMemoryUserDetailsService.loadUserByUsername(authenticationRequest.getUsername());

    final String token = jwtTokenUtil.generateToken(userDetails);

    return ResponseEntity.ok(new JwtTokenResponse(token));
  }
  
  @PostMapping(value = "${jwt.save.user.uri}")
  public void saveEncryptedPassword(@RequestBody JwtUserDetails jwtUserDetails) {
	 System.out.println("inside save");
	  jwtUserDetails.setPassword(bcryptEncoderService.EncodeString(jwtUserDetails.getPassword()));
	  
	  UserDetail userDetails = new UserDetail(jwtUserDetails.getId(), jwtUserDetails.getUsername(), jwtUserDetails.getFirstName(), jwtUserDetails.getLastName(), jwtUserDetails.getPhone(), jwtUserDetails.getEmail());
	  userDetailsRepository.save(userDetails);
	  jwtUserDetailsRepository.save(jwtUserDetails);
   
  }
  
  @GetMapping(path="userdetails/{username}")
	public List<JwtUserDetails> getUserDetails(@PathVariable String username) {
		return userDetailsRepository.findByUsername(username);
	}

  @RequestMapping(value = "${jwt.refresh.token.uri}", method = RequestMethod.GET)
  public ResponseEntity<?> refreshAndGetAuthenticationToken(HttpServletRequest request) {
    String authToken = request.getHeader(tokenHeader);
    final String token = authToken.substring(7);
    String username = jwtTokenUtil.getUsernameFromToken(token);
    JwtUserDetails user = (JwtUserDetails) jwtInMemoryUserDetailsService.loadUserByUsername(username);

    if (jwtTokenUtil.canTokenBeRefreshed(token)) {
      String refreshedToken = jwtTokenUtil.refreshToken(token);
      return ResponseEntity.ok(new JwtTokenResponse(refreshedToken));
    } else {
      return ResponseEntity.badRequest().body(null);
    }
  }

  @ExceptionHandler({ AuthenticationException.class })
  public ResponseEntity<String> handleAuthenticationException(AuthenticationException e) {
    return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(e.getMessage());
  }

  private void authenticate(String username, String password) {
    Objects.requireNonNull(username);
    Objects.requireNonNull(password);

    try {
      authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));
    } catch (DisabledException e) {
      throw new AuthenticationException("USER_DISABLED", e);
    } catch (BadCredentialsException e) {
      throw new AuthenticationException("INVALID_CREDENTIALS", e);
    }
  }
}

